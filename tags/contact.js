riot.tag2("contact",'<div class="card {is-removing: isRemoving}"><i if="{contactModel.contacts.length &gt; 3}" onclick="{removeContact}" class="card__remove">Remove</i><div class="md-input {valid: contact.name.edited &amp;&amp; contact.name.valid, error: contact.name.edited &amp;&amp; !contact.name.valid}"><input type="text" required onkeyup="{changeName}"><span class="highlight"></span><span class="bar"></span><label>Name</label><i class="icon icon-check"></i></div><div class="md-input {valid: contact.mail.edited &amp;&amp; contact.mail.valid, error: contact.mail.edited &amp;&amp; !contact.mail.valid}"><input required onkeyup="{changeMail}" type="email"><span class="highlight"></span><span class="bar"></span><label>Mail</label><i class="icon icon-check"></i></div></div>',"","",function(t){function e(){i-=10,elem.style.height=i+"px",i<0&&(elem.style.height="0",elem.style.padding="0",elem.style.margin="0",clearInterval(o),n())}this.previousMail,changeName=window.utils.debounce(function(t){contactModel.editName(this.opts.contact.id,t.target.value),this.update()},300),changeMail=window.utils.debounce(function(t){this.previousMail!==t.target.value&&(this.previousMail=t.target.value,contactModel.editMail(this.opts.contact.id,t.target.value),this.update())},300);var a=this;this.on("mount",function(){var t=contactModel.contacts[contactModel.contacts.length-1];contactModel.contacts.length>contactModel.minimum&&a.opts.contact.id===t.id&&setTimeout(function(){window.smoothScroll(a.root,500)},0)}),contactModel.on("error",function(t){a.opts.contact.id===t&&window.smoothScroll(a.root,500,function(){console.log("end")})});var i,o,n;this.removeContact=function(t){this.isRemoving=!0,i=this.root.firstElementChild.offsetHeight,o=setInterval(e,10),n=function(){contactModel.remove(a.opts.contact.id)},elem=this.root.firstElementChild,e(elem,i)}.bind(this)});